/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.usi.inf.sa2.CookieCrumbles;

/**
 *
 * @author alexm
 */

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Random;


    /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */





public class ParticleEmitterBH {
    private int particleCount;
     double originX;
     double originY;
    private ArrayList particleList;
    Rectangle boundingBox;
            
    ////Fields for Black Hole
    private double azimuthCounter = 0;
    private int azimuthTimes = 0;
    
 
    /**
     *
     * @param originX
     * @param originY
     * @param particleCount
     */
    public ParticleEmitterBH(double originX, double originY, int particleCount){
        this.particleCount = particleCount;
        this.originX = originX;
        this.originY = originY;
        boundingBox = new Rectangle((int) originX,(int) originY,35,35);
        particleList  = new ArrayList();    
        
    }
   
     /**
     *
     * @return
     */
    public double lengthRandomizer() {
        Random rand = new Random();
        double randomNum = rand.nextInt(55);
        return randomNum;
    }
     
    public double azimuthRandomizer() {
        Random rand = new Random();
        double randomNum = rand.nextInt(5);
        //System.out.println(randomNum);
        return randomNum/500;
    }
    
    public double getAzimuthFromGivenCartesian(double x, double y) {
        double azimuthC = Math.atan2(y, x);
        azimuthC = Math.toDegrees(azimuthC);
        //System.out.println(azimuth);
        return azimuthC;
    }
    
     public Rectangle getBoundingBox(){
         return boundingBox;
         
     }
     
     public void setBoundingBox(Rectangle rect){
         boundingBox = rect; 
     }
    
     
    /**
     *
     * @return
     */
    public double directionRandomizer() {
        Random rand = new Random();
        double min = 0;
        double max = 3.14/10;  //180 degreees!!
        double randomNum = min + (max - min) * rand.nextDouble();
        
        return randomNum;
    }
    
    public double getOriginX(){
        return originX;
    }
    
    /**
     *
     * @return
     */
    public double getOriginY(){
        return originY;
    }
    
    /**
     *
     * @param shiftXBy
     */
    public void setOriginX(double shiftXBy){
        originX = shiftXBy;
    }
    
    public void setOriginY ( double shiftYBy){
        originY = shiftYBy;
    }
    
    /**
     *
     * @param hi
     */
    public void setParticleList(ArrayList hi){
        particleList = hi;
    }
    
    
    /**
     *
     * @return
     */
    public ArrayList getParticleList(){
        return particleList;
    } 
    /*
     * Sets a number of particles generated by Particle 
     * emitter object.
     */
    public void setParticleCount( final int newCount){
        particleCount = newCount;
    }
   
    
    /**
     *
     * @return
     */
    public int getParticleCount() {
        return particleCount;
    }
    
   
    
   
    /**
     *
     * @param gr
     */
    public void recalculate(final Graphics gr){
        Graphics2D g = (Graphics2D) gr;
        
        for (int i = 0; i <5; i++) {
            
        
        Particle myparticle = new Particle(originX+20, originY+15, originX+20 ,originY+15, directionRandomizer(), /// In radians
                0, 90, 
                lengthRandomizer(), 60);
        Shape particleNew = new Rectangle((int) originX,
                    (int) originY, 15, 15);
            myparticle.setParticleRect(particleNew);
        particleList.add(myparticle);
        
        
        
        }
        for (int i = 0; i < particleList.size(); i++) {
            Particle part = (Particle) particleList.get(i);
            Shape particleRect2 = part.getParticleRect();
            Rectangle2D particleRect = particleRect2.getBounds2D();
            ///Black Hole
            double partInitValuesLength = (part.getPosition().getLength());
            double length = part.getPosition().getLength();
            
        
            BlackHole BH = new BlackHole(1200, -600);
            g.fillOval((int)BH.getX(),(int) BH.getY(), 200, 200);
            if(1 == 1){
                part.getPosition().setAzi(part.getPosition().getAzimuth() -(part.getPosition().getAzimuth() - partInitValuesLength)/5000000);
                //part.positionValue.j.setAzimuth(azimuth- (part.initValues.getAzimuth() - partInitValuesLength)/1000000); //+ partInitValuesAzimuth/5000);
                //if(part.positionValue.j.getAzimuth() > 1) {
                  //  particleList.remove(part);
                //}
                if(part.getPosition().getAzimuth() > 1){
                    particleList.remove(part);
                }
                if(part.positionGetY()< BH.getY()-150){
                    part.setLifetime(206);
                }
                
                if(part.positionGetX() > BH.getX()/2 && part.positionGetY() < BH.getY()-BH.getY()*1.2) {
                    //part.setVelocity(part.getVelocity()+ part.getVelocity()/4);
                if(part.positionGetX()>(BH.getX()+BH.getX())/1.5 && part.positionGetY()< BH.getY()+100){
                    part.setVelocity(part.getVelocity()-BH.getX()/700); ////!!!!!!!!!!!!
                   //part.getPosition().setAzi(length + length/2);
                        part.setLifetime(199);
                        //System.out.println("HEY");
                    
                    //System.out.println(part.getPosition().getLength());
                    //part.getPosition().setAzi(getAzimuthFromGivenCartesian(1200, -600)+ part.getPosition().getAzimuth());//part.getPosition().getAzimuth()+part.getPosition().getAzimuth()/7);
                    //part.setNewPosition();
                    //part.initValues.j.setAzimuth(2);
                    //part.initValues.j.setLength(length-BH.getX()/700);
                    

                    //part.setLifetime(199);
                    
                }
                   
                    //part.initValues.add(part.initValues);  !!!!!!!!!!!!!
                        if(part.getPosition().getAzimuth() - azimuthCounter < Math.toRadians(part.getPosition().getAzimuthFromGivenCartesian(BH.getX(), BH.getY()))+3){
                            part.getPosition().setAzi(part.getPosition().getAzimuth() - azimuthCounter);
                        }
//                        if(part.positionGetX()== BH.getX()+200) {
//                        System.out.println("hey");
//                        //part.setLifetime(201);
                    
                }
            }
            azimuthTimes += 0.1;
                azimuthCounter = azimuthRandomizer();
            
            
            ////END OF BLACK HOLE
            
            
           
            
            
            
            
            int lifetime = part.getLifetime();
            lifetime++;
            part.setLifetime(lifetime);
            part.setNewPosition();
            double x = part.positionGetX();
            double y = part.positionGetY();
            g.setPaint(Color.BLACK);
            //// TEST 
           
            
            
            
            Shape particleNew = new Rectangle((int) part.getEmitterOriginX() + (int)x,
                    (int)part.getEmitterOriginY() +(int)y, 15,15);
            part.setParticleRect(particleNew);
            g.fill(particleNew);
            if (lifetime > 200) {
                particleList.remove(part);
                part = null;
            }
            
            }
        
                
        
           
    
}

}

    

